#include "bhv_template/bhv_template.h"

using namespace helm;

BehaviorTemplate::BehaviorTemplate() : m_input_value(0.0) {
    std::cout << "A message from the template behavior" << std::endl;
}

void BehaviorTemplate::initialize(const rclcpp::Node::WeakPtr &parent) 
{
    m_node = parent;

    auto node = m_node.lock();

    m_logger = node->get_logger();

    // setup parameters
    auto param_desc = rcl_interfaces::msg::ParameterDescriptor{};
    param_desc.description = "This is parameter for test!";
    node->declare_parameter("param_double", 1.0, param_desc);
    node->get_parameter("param_double", m_param_double);
    printf("param is:%f\n", m_param_double);

    // setup ros operation 
    m_pub = node->create_publisher<std_msgs::msg::String>("str_pub", 10);

    m_sub = node->create_subscription<std_msgs::msg::Float64>(
        "str_sub", rclcpp::SystemDefaultsQoS(),
        std::bind(&BehaviorTemplate::templateCallback,
        this, std::placeholders::_1));

    // setup control DoF
    /**
     * @brief Declare the degree of freedoms to be controlled by the behavior
     *
     * @details This member variable dictates the DOFs that can be controllable
     * by the behavior. If this member is not initialized, behavior can only
     * trigger state changes. This vector gets values from enum type of
     * mvp_msgs/ControlMode enums.
     *
     */
    BehaviorBase::m_dofs = decltype(m_dofs){
        // enable DoF surge to be controlled
        mvp_msgs::msg::ControlMode::DOF_U 
    };    
}

void BehaviorTemplate::activated() {
    /**
     * @brief This function is called when the behavior gets activated.
     *
     * @note This function is an inherited virtual function. It may left
     * unimplemented.
     *
     * @details This function is called when the behavior internal state
     * defined by #BehaviorBase::m_actived changes to true.
     */
    std::cout << "Template behavior is activated!" << std::endl;
}

void BehaviorTemplate::disabled() {
    /**
     * @brief This function is called when the behavior gets disabled.
     *
     * @note This function is an inherited virtual function. It may left
     * unimplemented.
     *
     * @details This function is called when the behavior internal state
     * defined by #BehaviorBase::m_actived changes to false.
     */
    std::cout << "Template behavior is disabled!" << std::endl;
}

void BehaviorTemplate::templateCallback(
    const std_msgs::msg::Float64::SharedPtr msg) {
        
    // set to multi-thread shared values
    m_input_value = msg->data;

    RCLCPP_INFO(this->m_logger, "bhv template received: '%f'", msg->data);

    auto message = std_msgs::msg::String();
    message.data = "received: " + std::to_string(msg->data);
    m_pub->publish(message);
}

bool BehaviorTemplate::request_set_point(
    mvp_msgs::msg::ControlProcess *set_point) {

    /**
     * @brief Read the controller values from #BehaviorBase::m_process_values.
     *
     * @details The object type is mvp_controller/ControlProcess. MVP Controller
     * is just a MIMO PID controller with quadratic programming optimizer.
     * Naming convention is just taken from the control theory: [Error, Set
     * Point, Process]. Process and error values are generated by the
     * controller. Vehicle's physical state is in that variable.

     * @code{.cpp}
     *      double surge = BehaviorBase::m_process_values.velocity.x;
     *      double pitch = BehaviorBase::m_process_values.orientation.y;
     * @endcode
     */
    double surge = BehaviorBase::m_process_values.velocity.x;

    /**
     * @brief Write the requested action to #set_point variable
     *
     * @details Helm calls the function to get commands generated by the
     * behavior. Behavior must modify this value with the desired action.
     * Behavior can only control the degrees of freedom defined by the
     * #BehaviorBase::m_dofs vector.
     */
    set_point->velocity.x = surge + m_input_value;

    /**
     * @brief Return true if you want Helm to use the result of this behavior.
     *
     * @details Helm looks at the return value of this function and decides
     * whether or not to use the result from this function. If the function
     * returns false, helm will not use the result that is written to #set_point
     * variable.
     */
    return true;
}

#include "pluginlib/class_list_macros.hpp"
PLUGINLIB_EXPORT_CLASS(helm::BehaviorTemplate, helm::BehaviorBase)
